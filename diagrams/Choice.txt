Great question! The choice between WebSocket and WebRTC depends on your specific use case, performance requirements, and the complexity you're willing to handle. Here's a breakdown of why you might choose one over the other:

WebSocket

WebSocket is a bidirectional communication protocol that allows real-time data transfer between a client (frontend) and a server (backend). It's simpler to implement compared to WebRTC and is ideal for sending small to medium-sized data (like JSON messages or encoded images) in real-time.

When to Use WebSocket:

Simplicity:
WebSocket is easier to set up and maintain compared to WebRTC.
You don't need to deal with NAT traversal, signaling servers, or peer-to-peer connections.
Control Over Data:
WebSocket gives you full control over how data is sent and received. For example, you can send base64-encoded frames or custom messages.
Low Latency for Small Data:
If you're sending processed frames (e.g., bounding boxes or metadata) rather than raw video, WebSocket is sufficient and lightweight.
Server-Client Architecture:
WebSocket is ideal for a centralized architecture where the server processes the video and sends results to the client.
Compatibility:
WebSocket works well across all modern browsers and doesn't require additional libraries or plugins.
Limitations of WebSocket:

Not Optimized for Video Streaming:
WebSocket is not designed for high-bandwidth, low-latency video streaming. Sending raw video frames over WebSocket can be inefficient and resource-intensive.
Higher Latency:
For real-time video streaming, WebSocket may introduce more latency compared to WebRTC.
WebRTC

WebRTC (Web Real-Time Communication) is a peer-to-peer protocol designed specifically for real-time audio, video, and data streaming. It is optimized for low-latency, high-performance communication.

When to Use WebRTC:

Low Latency:
WebRTC is designed for real-time communication, making it ideal for streaming video with minimal delay.
Efficient Video Streaming:
WebRTC uses codecs like VP8/VP9 and H.264, which are optimized for video streaming. It also handles packet loss and network conditions better than WebSocket.
Peer-to-Peer Communication:
WebRTC allows direct communication between clients (peer-to-peer), reducing the load on the server and improving scalability.
Built-in Media Handling:
WebRTC has built-in support for capturing and streaming media (audio/video) from devices like webcams, making it ideal for live video applications.
Scalability:
For applications with multiple clients (e.g., video conferencing), WebRTC is more scalable than WebSocket because it offloads the streaming workload to the clients.
Limitations of WebRTC:

Complexity:
WebRTC requires a signaling server (e.g., WebSocket) to establish connections between peers. This adds complexity to the setup.
You also need to handle NAT traversal (using STUN/TURN servers), which can be challenging.
Browser Compatibility:
While WebRTC is supported in most modern browsers, it may require additional configuration for certain use cases (e.g., mobile devices or older browsers).
Not Ideal for Server-Client Streaming:
WebRTC is primarily designed for peer-to-peer communication. If your use case involves a server processing video and streaming it to a client, WebRTC may not be the best fit unless you use a media server (e.g., Janus, Kurento).
Key Differences

Feature 	            WebSocket	                        WebRTC
Latency  	            Higher latency for video	        Low latency, optimized for video
Bandwidth Efficiency 	Less efficient for raw video	    Highly efficient for video
Complexity	            Simple to implement	                More complex (signaling, NAT traversal)
Use Case	            Small data, server-client	        Real-time video/audio, peer-to-peer
Scalability	            Limited by server resources	        More scalable (peer-to-peer)
Media Handling	        Manual (e.g., encode/decodeframes)	Built-in media handling



Which Should You Use?

Use WebSocket if:

You're sending processed data (e.g., bounding boxes, metadata) rather than raw video.
You want a simple, server-client architecture.
Latency is not a critical factor.
You don't need to stream raw video or audio.
Use WebRTC if:

You need to stream raw video or audio with low latency.
You're building a real-time video application (e.g., video conferencing, live streaming).
You want to leverage peer-to-peer communication for scalability.
You're comfortable handling the additional complexity of signaling servers and NAT traversal.
Hybrid Approach

In some cases, you can use both WebSocket and WebRTC together:

Use WebSocket for signaling (e.g., to establish WebRTC connections).
Use WebRTC for streaming the video with low latency.
For example:

The frontend connects to the backend via WebSocket to initiate the video stream.
The backend sets up a WebRTC connection and streams the processed video frames directly to the frontend.
Conclusion

For your lemur tracking application:

If you're sending processed frames (e.g., frames with bounding boxes) and latency isn't critical, WebSocket is a good choice due to its simplicity.
If you need to stream raw video with low latency or plan to scale the application, WebRTC is the better option, despite its added complexity.
If you're just starting out, I recommend trying WebSocket first. If you run into performance issues (e.g., high latency or bandwidth constraints), you can always switch to WebRTC later.