import { app, BrowserWindow, session, ipcMain, dialog } from 'electron'; // Added ipcMain, dialog
import path from 'path'; // Added path for preload script path resolution

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const API_BASE_URL = 'http://localhost:5055';

const handleOnOpen = async() => {
  console.log('on-open');
  try {
      const response = await fetch(`${API_BASE_URL}/on-open`, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',
          },
      });

  } catch (error) {
      //console.error('Error in on-open:', error);
      console.log('Backend is not running, going to manually open that backend');
  }
};

const handleOnClose = async() => {
  console.log('on-close');
  try {
      const response = await fetch(`${API_BASE_URL}/on-close`, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',
          },
      });

  } catch (error) {
      console.error('Error in on-close:', error);
  }
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1400,
    webPreferences: {
      // --- Security Best Practices ---
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // Use the preload script entry point
      contextIsolation: true, // Enable context isolation (recommended)
      nodeIntegration: false, // Disable Node.js integration in renderer (recommended)
      webSecurity: false, // generally avoid disabling webSecurity unless absolutely necessary
      // --- End Security Best Practices ---
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  console.log('Main window created and loaded:');
  handleOnOpen()
};

// --- IPC Handler for Folder Selection ---
// Listen for the 'dialog:openDirectory' message from the renderer process
ipcMain.handle('dialog:openDirectory', async () => {
    console.log('Main process received dialog:openDirectory request');
    try {
        const { canceled, filePaths } = await dialog.showOpenDialog({
            properties: ['openDirectory'], // Specify that we want to select a directory
            title: 'Select Video Folder' // Optional: Customize dialog title
        });

        if (!canceled && filePaths.length > 0) {
            console.log('Main process selected folder:', filePaths[0]);
            return filePaths[0]; // Return the absolute path of the selected folder
        }
        console.log('Folder selection canceled or no path selected.');
        return null; // Return null if canceled or no folder was selected
    } catch (error) {
        console.error('Error showing open dialog:', error);
        // Optionally re-throw or return an error structure
        // throw error; // If you want the renderer's catch block to trigger
        return null; // Or return null on error
    }
});
// --- End IPC Handler ---


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.on('ready', createWindow); // Use app.whenReady().then() for async operations like IPC setup
app.whenReady().then(() => {
    createWindow();

    app.on('activate', () => {
      // On OS X it's common to re-create a window in the app when the
      // dock icon is clicked and there are no other windows open.
      if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
        
      }
    });
});


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  handleOnClose()
  if (process.platform !== 'darwin') {
    app.quit();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.